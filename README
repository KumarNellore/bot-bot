Introduction:

This is an android native app automation framework.
This tool is based on keyword driven approach. For defining a test-case user have to diefine his cases in "csv" format.
These csv fiel will be converted to java fiels and then executed using the TestNG execution framework.
It uses following open-source tools:
1. Selenium Nativedriver
2. TestNG
3. Sikuli

Note: This tool requires source code of the app that is being automated to be available.
Apps that internally call WebView or load webpages may be able to use this tool.(Not tested)

Pre-conditions:
1. Android SDK has been installed. More info is available at "http://developer.android.com/sdk/installing.html"
2. If you want to use the verifyscreen option in the tool. Please install sikuli on your system. Sikuli can be obtained at: http://sikuli.org/download.shtml
3. Apache ant needs to be installed.

Installation:
1. Export the andro_auto_framework from git to your local system.
2. Import the source code of the android app that needs to be installed into your eclipse IDE.
3. Copy the "server-standalone.jar" from the andro_auto_framework/lib folder to the root of the Android project inside Eclipse IDE.
4. Open the AndroidManifest.xml file of your Android app and paste the following to it:

<instrumentation android:targetPackage="{app package name}"
		android:name="com.google.android.testing.nativedriver.server.ServerInstrumentation" />
	<uses-permission android:name="android.permission.INTERNET" />
	<uses-permission android:name="android.permission.WAKE_LOCK" />
	<uses-permission android:name="android.permission.DISABLE_KEYGUARD" />
Here the {app package name} needs to be replaced with the name of the package as specified in the mainfest element's package attribute.

5. Build and install the android app on to the simulator.
6. Go to the android sdk installation folder and inside it to platform-tools. Then run the following commands:
	- adb shell am instrument {app_package_name}/com.google.android.testing.nativedriver.server.ServerInstrumentation
	Here {app_package_name} needs to be replaced with the name of the package as specified in the mainfest element's package attribute.
	- adb forward tcp:54129 tcp:54129

You can confirm that the instrumentation is started by running adb logcat and looking for a line like this:
	I/com.google.android.testing.nativedriver.server.ServerInstrumentation(  273): Jetty started on port 54129
7. Package name and initial activity name has to be defined in the BaseClass.java file. (This will be converted to properties file going forward)
8. Run the ant command at the root of the andro_auto_framework directory:

ant custom-testng

This will compile your code and execute your test cases. Currently TestNG and Junit report are generated.



